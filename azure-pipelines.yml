variables:
  # When Agent.JobName matches this value (and the git ref is a tag), then
  # built artifacts will be published to Azure Blob Storage.
- name: "AzurePublishWhen"
  value: "Mojave-Xcode-11.1"
- name: "RunTestCloudTestsWhen"
  value: "Mojave-Xcode-11.2"
- group: XamarinUITestCI

trigger:
  tags:
    include:
    - '*'
  branches:
    include:
    - master
pr:
  branches:
    include:
    - master
schedules:
- cron: "0 23 * * Mon-Fri"
  displayName: Nightly build
  branches:
    include:
    - master
  always: true

jobs:

- job:
  strategy:
    matrix:
      # Mojave-Xcode-10.3:
      #   IMAGE_POOL: 'macOS-10.14'
      #   XCODE_VERSION: '10.3'
      # Mojave-Xcode-11.0:
      #   IMAGE_POOL: 'macOS-10.14'
      #   XCODE_VERSION: '11'
      # Mojave-Xcode-11.1:
      #   IMAGE_POOL: 'macOS-10.14'
      #   XCODE_VERSION: '11.1'
      # Mojave-Xcode-11.2:
      #   IMAGE_POOL: 'macOS-10.14'
      #   XCODE_VERSION: '11.2'
#       BigSur-Xcode-12.5:
#         IMAGE_POOL: 'TestCloudPool2'
#         XCODE_VERSION: '12.5'
      BigSur-Xcode-13.0:
        IMAGE_POOL: 'macOS-11'
        XCODE_VERSION: '13.0'
  pool:
    # ${{ if ne(variables['XCODE_VERSION'], '12.5') }}:
    #   vmImage: $(IMAGE_POOL)
    # ${{ if eq(variables['XCODE_VERSION'], '12.5') }}:
    name: TestCloudPool2
  timeoutInMinutes: 240

  steps:

  - script: |
      set -e
      sudo xcode-select --switch "/Applications/Xcode_$(XCODE_VERSION).app/Contents/Developer"
      echo "Xcode version: $(xcrun xcodebuild -version)"
      echo "Xcode path: $(xcrun -f xcodebuild)"
      echo "Xcode select path: $(xcode-select --print-path)"
    displayName: "Select Xcode $(XCODE_VERSION)"

  - script: |
      eval "$(/opt/homebrew/bin/rbenv init -)" && ruby -v
      rbenv global 2.7.2
      ruby -v
      gem uninstall bundler
      gem install bundler:2.2.7
      bundle _2.2.7_ install
    displayName: "Bundler 2.2.7 Install"

  - script: |
      pwd
      set -e
      whoami
      echo $0
      echo $SHELL
      echo $PATH
      ruby -v
      echo -e "install: --no-document --env-shebang\nupdate:  --no-document --env-shebang" > ~/.gemrc
      bundle install
    displayName: "Prepare Ruby Environment"

  - script: |
      set -e
      rm -rf calabash-codesign
      [ -d "calabash-codesign" ] && rm -rf calabash-codesign
      git clone https://$(CalabashKeychainGitHubAccessToken)@github.com/xamarinhq/calabash-codesign.git
      calabash-codesign/apple/create-keychain.sh
    displayName: "Download and install keychain"

  - script: make app
    displayName: "Make app"

  - script: make ipa
    displayName: "Make ipa"

  - script: bundle exec bin/ci/appcenter.rb
    displayName: "bin/ci/appcenter.rb"
    condition: eq(variables['Agent.JobName'], variables['RunTestCloudTestsWhen'])


  - script: bundle exec bin/ci/cucumber.rb
    displayName: "bin/ci/cucumber.rb"

  - task: Bash@3
    inputs:
      targetType: filePath
      filePath: "./bin/ci/az-publish.sh"
    env:
      AZURE_STORAGE_ACCOUNT: $(AzureStorageAccount)
      AZURE_STORAGE_KEY: $(AzureStorageKey)
      AZURE_STORAGE_CONNECTION_STRING: $(AzureStorageConnectionString)
      SOURCE_BRANCH: $(Build.SourceBranch)
    displayName: "Publish to Azure Blob Storage"
    condition: and(succeeded(), eq(variables['Agent.JobName'], variables['AzurePublishWhen']), eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.Reason'], 'IndividualCI'))

  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    inputs:
      failTaskOnFailedTests: true
      testResultsFiles: 'reports/junit/**/*.xml'
    condition: always()
